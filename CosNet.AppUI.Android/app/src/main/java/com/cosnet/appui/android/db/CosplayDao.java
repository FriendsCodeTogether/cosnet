package com.cosnet.appui.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COSPLAY".
*/
public class CosplayDao extends AbstractDao<Cosplay, Long> {

    public static final String TABLENAME = "COSPLAY";

    /**
     * Properties of entity Cosplay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cosplay_name = new Property(1, String.class, "cosplay_name", false, "COSPLAY_NAME");
        public final static Property Cosplay_serie = new Property(2, String.class, "cosplay_serie", false, "COSPLAY_SERIE");
        public final static Property Start_date = new Property(3, java.util.Date.class, "start_date", false, "START_DATE");
        public final static Property Due_date = new Property(4, java.util.Date.class, "due_date", false, "DUE_DATE");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
    }


    public CosplayDao(DaoConfig config) {
        super(config);
    }
    
    public CosplayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COSPLAY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COSPLAY_NAME\" TEXT NOT NULL ," + // 1: cosplay_name
                "\"COSPLAY_SERIE\" TEXT," + // 2: cosplay_serie
                "\"START_DATE\" INTEGER," + // 3: start_date
                "\"DUE_DATE\" INTEGER," + // 4: due_date
                "\"STATUS\" TEXT);"); // 5: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COSPLAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cosplay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCosplay_name());
 
        String cosplay_serie = entity.getCosplay_serie();
        if (cosplay_serie != null) {
            stmt.bindString(3, cosplay_serie);
        }
 
        java.util.Date start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindLong(4, start_date.getTime());
        }
 
        java.util.Date due_date = entity.getDue_date();
        if (due_date != null) {
            stmt.bindLong(5, due_date.getTime());
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cosplay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCosplay_name());
 
        String cosplay_serie = entity.getCosplay_serie();
        if (cosplay_serie != null) {
            stmt.bindString(3, cosplay_serie);
        }
 
        java.util.Date start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindLong(4, start_date.getTime());
        }
 
        java.util.Date due_date = entity.getDue_date();
        if (due_date != null) {
            stmt.bindLong(5, due_date.getTime());
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cosplay readEntity(Cursor cursor, int offset) {
        Cosplay entity = new Cosplay( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // cosplay_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cosplay_serie
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // start_date
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // due_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cosplay entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCosplay_name(cursor.getString(offset + 1));
        entity.setCosplay_serie(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart_date(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDue_date(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cosplay entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cosplay entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cosplay entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
