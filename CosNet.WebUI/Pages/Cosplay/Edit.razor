@page "/cosplay/{CosplayId:guid}/edit"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Edit cosplay</h3>
<EditForm Model="@cosplay" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label for="name">Character:</label><br />
        <InputText class="form-input" id="name" placeholder="Character name" @bind-Value="cosplay.Name" />
    </p>
    <p>
        <label for="serie">Series:</label><br />
        <InputText class="form-input" id="serie" placeholder="Series" @bind-Value="cosplay.Serie" />
    </p>
    <p>
        <label for="startDate">Start Date:</label><br />
        <InputDate class="form-input" id="startDate" @bind-Value="cosplay.StartDate" />
    </p>
    <p>
        <label for="dueDate">Due Date:</label><br />
        <InputDate class="form-input" id="dueDate" @bind-Value="cosplay.DueDate" />
    </p>
    <p>
        <label for="budget">Budget:</label><br />
        <span class="currencyinput"><InputNumber class="form-input" id="budget" @bind-Value="cosplay.Budget" /></span>
    </p>
    <p>
        <label for="status">Status:</label><br />
        <InputSelect class="form-input" id="status" @bind-Value="cosplay.Status">
            <option value="In Progress">In Progress</option>
            <option value="On Hold">On Hold</option>
            <option value="Planned">Planned</option>
            <option value="Finished">Finished</option>
            <option value="Cancelled">Cancelled</option>
        </InputSelect>
    </p>
    <p>
        <button class="btn-form btn btn-primary rounded-pill" type="submit">Save</button>
        <a class="btn-form btn btn-secondary rounded-pill" href="cosplay">Cancel</a>
    </p>
</EditForm>

<button class="btn btn-danger rounded-pill" @onclick="() => Delete(cosplay)">Delete</button>

@code {
    private CosplayDTO cosplay = new CosplayDTO();

    [Parameter]
    public Guid CosplayId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cosplay = await Http.GetFromJsonAsync<CosplayDTO>($"/cosplay/{CosplayId}");
    }

    async Task Delete(CosplayDTO cosplay)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the cosplay '{cosplay.Name}'?"))
            return;

        await Http.DeleteAsync($"/cosplay/{CosplayId}");

        NavigationManager.NavigateTo("cosplay");
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PutAsJsonAsync<CosplayDTO>($"/cosplay/{CosplayId}", cosplay);

        NavigationManager.NavigateTo($"cosplay/{CosplayId}");
    }
}
