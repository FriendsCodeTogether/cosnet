@page "/cosplay/{CosplayId:guid}/cosplayitem/{CosplayItemId:guid}/edit"
@inject ICosplayItemService CosplayItemService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using CosNet.Shared.DTOs.CosplayItem

<div class="cosplay-form-container">

    <h2 class="title cosplay-form-title">Edit cosplay</h2>

    <div class="cosplay-form-content">

        <div class="cosplay-form-group">

            <EditForm Model="@cosplayItem" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p>
                    <label class="form-label" for="name">Name:</label><br />
                    <input type="text" maxlength="150" class="form-input" id="name" placeholder="Item name" @bind-Value="cosplayItem.Name" @bind-Value:event="oninput" />
                    <label class="max-input">@cosplayItem.Name.Count()/@maxName</label>
                </p>
                <p>
                    <label class="form-label" for="serie">Description:</label><br />
                    <textarea class="form-input" id="serie" placeholder="Description" @bind="cosplayItem.Description" @bind:event="oninput" />
                    <label class="form-error-description">*Max 500 Characters</label><label class="max-input">@cosplayItem.Description.Count()/@maxDescription</label>
                </p>
                <p>
                    <label class="form-label" for="price">Price:</label><br />
                    <span class="currencyinput"><input type="number" min="0" class="form-input" id="price" @bind-Value="cosplayItem.Price" @bind-Value:event="oninput" /></span>
                    <label class="form-error-price">*Max 9 Characters</label><label class="max-input">@cosplayItem.Price.ToString().Count()/@maxPrice</label>
                </p>
                <p>
                    <label class="form-label" for="dueDate">Due Date:</label><br />
                    <InputDate class="form-input" id="dueDate" @bind-Value="cosplayItem.DueDate" />
                </p>
                <p>
                    <label class="form-label" for="isMade">Item Type (Is Made?):</label><br />
                    <InputCheckbox class="form-input" id="isMade" @bind-Value="cosplayItem.IsMade" />
                </p>
                <p>
                    <label class="form-label" for="status">Status:</label><br />
                    <InputSelect class="form-input" id="status" @bind-Value="cosplayItem.Status">
                        @if (cosplayItem.IsMade)
                        {
                            <option value="In Progress">In Progress</option>
                        }
                        else
                        {
                            <option value="Ordered">Ordered</option>
                            <option value="To Buy">To Buy</option>
                        }
                        <option value="Completed">Completed</option>
                    </InputSelect>
                </p>

                @if (cosplayItem.IsMade)
                {
                    <p>
                        <label class="form-label" for="progress">Progress:</label><br />
                        <InputNumber min="0" max="100" class="form-input" id="progress" @bind-Value="cosplayItem.Progress" />
                    </p>
                    <p>
                        <label class="form-label" for="workTime">Work Time:</label><br />
                        <span class="hourlyinput"><input type="number" min="0" class="form-input" id="workTime" @bind-Value="cosplayItem.WorkTime" @bind-Value:event="oninput" /></span>
                        <label class="form-error-work-time">*Max 5 Characters</label><label class="max-input">@cosplayItem.WorkTime.ToString().Count()/@maxWorkTime</label>
                    </p>
                }
                else
                {
                    <p>
                        <label class="form-label" for="buyLink">Buy Link:</label><br />
                        <input type="text" class="form-input" id="buyLink" placeholder="https://cosnet.azurewebsites.net/" @bind-Value="cosplayItem.BuyLink" @bind-Value:event="oninput" />
                        <label class="form-error-buy-link">*Max 200 Characters</label><label class="max-input">@cosplayItem.BuyLink.Count()/@maxBuyLink</label>
                    </p>
                }

                <div class="cosplay-form-group-button-row">
                    <button class="cosplay-form-group-button-save btn btn-primary rounded-pill" type="submit">Save</button>
                    <span class="flex-spacer"></span>
                    <a class="cosplay-form-group-button-cancel btn btn-secondary rounded-pill" href="cosplay/@CosplayId/cosplayitem">Cancel</a>
                </div>
            </EditForm>
        </div>

        <span class="flex-spacer"></span>

        <div class="cosplay-form-image-group">
            <img class="cosplay-form-image" src="https://placekitten.com/600/600" alt="Picture of the cosplay">
        </div>
    </div>
</div>


@code {
    public CosplayItemForUpdateDTO cosplayItem = new CosplayItemForUpdateDTO();

    [Parameter]
    public Guid CosplayId { get; set; }

    [Parameter]
    public Guid CosplayItemId { get; set; }

    private const int maxName = 150;
    private const int maxDescription = 500;
    private const int maxPrice = 9;
    private const int maxWorkTime = 5;
    private const int maxBuyLink = 200;

    protected override async Task OnInitializedAsync()
    {
        CosplayItemDTO cosplayItemUpdate = await CosplayItemService.GetCosplayItemAsync(CosplayId, CosplayItemId);

        cosplayItem.Name = cosplayItemUpdate.Name;
        cosplayItem.Status = cosplayItemUpdate.Status;
        cosplayItem.Description = cosplayItemUpdate.Description;
        cosplayItem.Price = cosplayItemUpdate.Price;
        cosplayItem.DueDate = cosplayItemUpdate.DueDate;
        cosplayItem.IsMade = cosplayItemUpdate.IsMade;
        cosplayItem.Progress = cosplayItemUpdate.Progress;
        cosplayItem.WorkTime = cosplayItemUpdate.WorkTime;
        cosplayItem.BuyLink = cosplayItemUpdate.BuyLink;
    }

    private async Task HandleValidSubmit()
    {
        await CosplayItemService.UpdateCosplayItemAsync(CosplayId, CosplayItemId, cosplayItem);

        NavigationManager.NavigateTo($"cosplay/{CosplayId}/cosplayitem/{CosplayItemId}");
    }
}
