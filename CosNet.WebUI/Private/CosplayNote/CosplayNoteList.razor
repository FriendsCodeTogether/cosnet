@page "/cosplay/{CosplayId:guid}/cosplaynote"
@inject ICosplayNoteService CosplayNoteService
@inject NavigationManager NavigationManager
@using CosNet.Shared.DTOs.CosplayNote
@attribute [Authorize]

<div class="cosplay-note-list-container">
    <div class="cosplay-note-list-top-row">
        <h1 class="title">Cosplay notes</h1>
        <span class="flex-spacer"></span>
        <a class="cosplay-note-list-add-btn btn btn-primary rounded-pill" href="cosplay/@CosplayId.ToString()/cosplaynote/create">Add</a>
    </div>

    @if (cosplayNotes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var note in cosplayNotes)
        {
            <div class="cosplay-note-item">
                <div class="cosplay-note-item-text">
                    <div class="cosplay-note-item-text-title">
                        <div class="cosplay-note-item-text-title-name">@note.Name</div>
                        <div class="cosplay-note-item-text-title-date">@note.CreationDate</div>
                    </div>
                    <div class="cosplay-note-item-description">@note.Description</div>
                </div>
                <div class="cosplay-note-item-buttons">
                    <a class="cosplay-note-list-edit-btn btn btn-primary rounded-pill" href="cosplay/@CosplayId/cosplaynote/@note.CosplayNoteId/edit">Edit</a>
                    <button class="cosplay-note-list-delete-btn btn btn-primary rounded-pill">Delete</button>
                </div>
            </div>
        }
    }
</div>

@code {
    private IEnumerable<CosplayNoteDTO> cosplayNotes;

    [Parameter]
    public Guid CosplayId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cosplayNotes = await CosplayNoteService.GetCosplayNotesAsync(CosplayId);
        cosplayNotes = cosplayNotes.OrderByDescending(c => c.CreationDate);
    }
}
